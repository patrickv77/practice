HTML

-----------------
html boilerplate

h elements <h1>-<h6>

<!-- --> commenting

images <img>

external/internal links
anchor elements <a>
image links <img>

unordered/ordered lists <ul> <ol>

radio buttons/checkboxes

<div> div elements

<head> and <body>
-----------------

basic CSS

-----------------
text color

<style> to style multiple elements

hexcode to mix colors

borders and rounded corners border-radius

background-color

id with #

padding/margin
    padding shifts the insides
    margin shifts the outsides
-----------------

applied visual design

-----------------

text-align

width/height

<strong> bold
<u> underline
<em> italics
<s> strikethrough

<hr> long horizontal line

box-shadow (offset-x, offset-y, blur-radius, spread-radius, color)
    blur-radius and spread-radius are optional

opacity

text-transform

font-size and font-weight

line-height

hover state can manipulate elements when you mouse over (hover) them

relative position, absolute position, fixed position

float property

z-index for overlapping properties

linear gradients

@keyframes and animation properties

bezier curves cubic-bezier
    p0,p1,p2,p3
    p0 and p3 are predetermined  p0 = (0,0) p3 = (1,1)
    p1, p2 user defined using--> 
        animation-timing-function: cubic-bezier (x1,y1,x2,y2)

--------------

applied accessability

--------------

alt tags when and when not to use

h1-h6 should be organized in a meaningful and heirarchical fashion
    there should only by one h1 ever
    h2 subsection of h1, h3 subsection of h2 etc. do not skip from h2 to h4 because it looks better, use css to change relative sizings

renaming div elements as article, nav, footer, main etc to help with readability/accessability

audio tag for audio elements
    putting control within the tag brings up play pause volume controls

figure/figcaption for more descriptive pictures

use for with id in labels

fieldset and legend for radio buttons (or groups of buttons/checkboxes etc)

can make screen-reader only content and hide it off screen

higher contrast ratio for readability

can achieve different contrast ratio with hue, saturation, lightness as well as just changing the colors

use more meaningful descriptors for anchor tags (dont use "click here" or "read more") 

accesskey to assign hotkeys to links or buttons etc

apply tabindex to text to highlight it when user tabs through page
    can also determine the tab order of items when you tab through a page

can use @media query to change css rules dependent on width or height of device

responsive image:
    img {
        max-width: 100%;
        height: auto;
    }

use smaller images (retina image, generally half of normal resolution) to increase clarity 

CSS FLEXBOX

    display: flex to position two boxes
    flex-direction
        row, column
    justify-content (aligns items along the main axis)
        center, flex-start, flex-end, space-around, space-evenly
    align-items (aligns items along the cross axis)
        center, flex-start, flex-end, stretch, baseline
    flex-wrap (wraps items or not)
        wrap, nowrap, wrap-reverse
    flex-shrink to shrink things relative to other flex-shrink labeled items in the container
    flex-grow opposite of shrink
    flex-basis initial size of items before flex shrink/grow
    **all 3 flex values can be combined into one flex statement**
        flex: (flex-grow) (flex-shrink) (flex-basis)
        default values are flex: 0 1 auto;
    order property can be used to order flex items in container
        the default order is the order they appear in source html
        can be used to reorder items without shifting source html
    align-self lets you adjust alignment on an individual basis

CSS-GRID 

    set display: grid to change any container to a grid
        (wont do anything until you define the structure of the grid)\
    grid-template-columns and grid-template-rows
        example-- grid-template-columns: 50px 50px; <-- sets two columns of 50px each 
    grid-column-gap and grid-row-gap for gaps btwn columns and rows
        grid-gap combines these; one value makes a gap for both rows and columns, two values makes a gap for rows first then columns
    imagine the lines between columns and rows
        grid-column and grid-row can be used by putting a starting line and ending line to control how many columns or rows a container spans
    justify-self aligns item horizontally
        start, center, end
    align-self aligns item vertically
        start, center, end
    justify-items (horizontally) and align-items (vertically) for all items in a container

    grid-template-areas to assign names to sections of your grid
        grid-area to put an item in your named section of the grid
        example--   grid-template-areas:  "hello hello hello 
                                         howdy howdy howdy
                                        goodbye goodbye goodbye"
                    grid-area: hello; places the item in the "hello" area of the grid
                    grid-area: without grid-template-areas
                        grid-area: n/x/y/z (horizontal line to start at) / (vertical line to start at) / (horizontal line to end at) / (vertical line to end at)
    use grid-template-rows and grid-template-columns: 
        repeat() to create many rows/columns with the same dimensions
            grid-template-rows: repeat(100, 50px) makes 100 rows of 50px height
            grid-template-columns: repeat(2, 1fr 50px) 20px translates to repeat: 1fr 50px 1fr 50px 20px //5 columns
            auto-fill can be used within repeat to make as many items that will fit the container. use with minmax for best results
        minmax() to set min and max width of column
